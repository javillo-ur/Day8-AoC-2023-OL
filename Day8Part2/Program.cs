Console.WriteLine(new List<string[]>(){File.ReadAllLines("input.txt")}.Select(j => new{LR = j[0], rest = j[2..]}).Select(j => new{j.LR, nodes = j.rest.Select(line => new{start = line.Split(" ")[0], left = line.Split("(")[1].Split(",")[0], right = line.Split(")")[0].Split(",")[1].Trim()})}).Select(j => new{j.LR, nodes = new Dictionary<string,string>(j.nodes.Select(node => new KeyValuePair<string, string>(node.start, j.LR.Aggregate(node.start, (previous, current) => current == 'L' ? j.nodes.First(c => c.start == previous).left : j.nodes.First(c => c.start == previous).right))))}).Select(j => new{j.LR, dict = j.nodes, nodes = new Dictionary<string,Tuple<long,string>>(j.nodes.Select(n => new KeyValuePair<string,Tuple<long,string>>(n.Key, Enumerable.Range(0, j.nodes.Count()).Aggregate(new Tuple<long,string>(1, n.Value), (previous, current) => previous.Item2.EndsWith('Z') ? previous : new(previous.Item1 + 1, j.nodes[previous.Item2])))))}).Select(j => j.LR.Length * j.dict.Keys.Where(r => r.EndsWith('A')).Aggregate((long)1, (previous, current) => previous * j.nodes[current].Item1)).First());